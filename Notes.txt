cd .. Change Directory
touch - create file
mkdir - create folder 

We can create more than one file using below command

touch filename1 filename2

cat -- see the data inside the file.

vim -- write / delete the data inside the file and the use the below code to save and exot
		- after writing in the file use ESC and :wq! ( W-Write, Q-Quit )	

----------------------

- In Linux system all file directories starts with '/'. ( Root Directory ).
- pwd / echo $HOME: will give you that present working directory.
- cat > file5 : It will create the file along with it we need to add the content of that file. And enter the 'ctrl+D' to come out from the editor , if we do the same operation again then will loss the old data, means it will delete the old data and add the new data.
- cat >> file3 : It will not delete the old data but it will add the new data and keep the old data.
- vim file4 : it will create the file along with we need to add the content to that file.

- :wq - save the file 
- :q! - quiet the file without saving

rm : This command will delete the both files and directories.
rm filename : It will delete the file.
rm foldername : will delete the folder along with all files and folders inside it.
rm -i filename: it will ask us to before delete a file
rm -r foldername: it will ask us to before delete a folder (-r means: recursively)
ls -l : it shows the meta data ( -l is a longlisting files.)
- ls -a : it shows the hidden files.
- touch .filename : it creates the hidden files.
- ls -l: it shows the meta data for all the files without hidden files.
- ls -l -a : it show the meta data for all files including hidden files for the same operation we can use 'ls -la / ls -al' as well.
- man : it will describes the description of all options.
ex: man ls.
- ls -la: it will give the file sizes.
- ls 0lah : it will give the file sizes with human readable format.
- ls - lat ( t means timestamp): it will arrange the file timestamp, latest files goes to the top and older files goes to the bottom.
- ls -latr ( 't' mean timestamp, 'r' means rivers timestamp)it will arrange the all files into rivers timestamp
- rm file* : it removes the all files starts with 'file'.
- cat > file1 : it creates the new file with content.
- cp file1 file2 : It will create the file2 and copy the file1 content into file2.

- cp file1 d1/ : it will copy the file1 into d1 directory.
- cat file1 d1/  : it will shows the content of file1.
- cat /etc/passwd : this command will shows the data from the passwd folder but it will shows the limited data which is visible in the screen but if we have 100's of lines code this command will not give the data but we can go with 'less' command
- less /etc/passwd: this command will display the entire data in that particular folder but we can see it by using cursor.
- head /etc/passwd: by default this command will give you top 10 lines of code but if we want to see the specific number of the lines codes then we need to add the number after head command.
- head -3 /etc/passwd/: it will shows the top 3 lines of code.
- tail /etc/passwd: by using this command we can see the last 10 lines of code similar if we want to see the last 2 lines code then use ' tail -2 /etc/passwd'
- ** grep ( globally search for regular expression and print): grep sai /etc/passwd: it will search the 'sai' letter in the particular file and display the all occurrences of that word.
- grep -i /etc/passwd: it will search for SPOOL irrespective of the case sensitive and it will present the data.
- grep -n spool /etc/passwd: It will search the spool word and present it with line numbers.
- grep -v spool /etc/passwd: it do the reverse search like it will present the data which is not having spool word.
- grep -nv spool /etc/passwd: It will present the data without spool word with line numbers. 
- cut -d(Delimiter) ":" -f(Field Column) 1,7 /etc/passwd:  this command displays the data from the column word 1 and 7 only.
[root@server1 ~]# cat file1
Dockor Kubernetes Swarm
Ansible Jenkins Git
Bamboo Ant Maven
[root@server1 ~]#

[root@server1 ~]# cut -d " " -f 1,3 file1
Dockor Swarm
Ansible Git
Bamboo Maven
[root@server1 ~]#

above command displayed 1st and 3rd word in the column.
- wc filename : It will count the words. By default it count the lines, word count and character count in that file.
[root@server1 ~]# wc file1
 3  9 61 file1

- wc -l file1: It will give count of lines in that file.

[root@server1 ~]# wc -l file1
3 file1


- wc -w file1: it will give the count of words in that file.
[root@server1 ~]# wc -w file1
9 file1

- wc -c file1: It will give the character count in that file.

[root@server1 ~]# wc -c file1
61 file1

- wc -cw file1 : It will give the characters and word count in that file.

[root@server1 ~]# wc -cw file1
 9 61 file1

- wc -cwl file1 : It will give the characters,line and word count in that file.
- sort file2: It will sort the data.
[root@server1 ~]# sort file2
1
2
3
4
5
6
7
8


- append the some more data in that file.
[root@server1 ~]# cat >> file2
33
44
63
22

- sort file2 

[root@server1 ~]# sort file2: It is soring the data based on the characters but not numeric.

1
2
22
3
33
4
44
5
6
63
7
8

- sort -n file2: It will sort the data based on the numeri's.

[root@server1 ~]# sort -n file2
1
2
3
4
5
6
7
8
22
33
44
63


- Permissions: Generally the person who is creating the file that person having the owner permission, Group is the community which we are sharing the file and Other anyone doesn't fall the owner and group category is called as others.


[root@server1 ~]# ls -l
total 140
-rw-------. 1 root root  1393 Apr 10 04:00 anaconda-ks.cfg :- The 1st character comes with '-' is stands for normal file
drwxr-xr-x. 2 root root  4096 Jun  8 18:17 Anugna :- the 1st character 'd' then it a directory.
drwxr-xr-x. 2 root root  4096 Jul 18 03:15 Chinnu
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Desktop
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Documents
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Downloads
-rw-rw--r--. 1 root root    61 Sep 25 20:14 file1  -------- The next 3 characters 'rw-' this is read m, write permission which is having owner and he's not having execute permissions. The next 3 characters 'rw-' having the group permissions and next 3 characters 'r--' its a reading permission which is having others.
-rw-r--r--. 1 root root    28 Sep 25 20:41 file2
-rw-r--r--. 1 root root     0 Jul 30 03:40 f.txt
-rw-r--r--. 1 root root 50606 Apr 10 04:00 install.log
-rw-r--r--. 1 root root 10033 Apr 10 03:57 install.log.syslog
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Music
drwxr-xr-x. 2 root root  4096 Jun  8 18:17 Pangal
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Pictures
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Public
drwxr-xr-x. 6 root root  4096 Jul 30 03:47 Sai
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Templates
drwxr-xr-x. 2 root root  4096 Jul 18 01:03 TESR-DTR
drwxr-xr-x. 2 root root  4096 Apr 16 19:20 Test
drwxr-xr-x. 3 root root  4096 Jul 18 05:36 TEST_DIR
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Videos


We can change the permissions by using 'chmod' command. the chmod can change the permissions in two ways, 1st way is numerical notation and other one is alphabetical notation.
- Lets start with numerical format.

r - 4 .... read
w - 2 .... write
x - 1 .... execute

for example If want read, write & execute permission then 4+2+1=7
If I want read & write permission then 4+2=6, 
If I war read and execute permission then 4+1=5
f I want write and Execute permission then 2+1=3

[root@server1 ~]# ls -l file2
-rw-r--r--. 1 root root 28 Sep 25 20:41 file2 -- 6-Owner 4-ther, 4-Other
 
- Now we can change the permissions to the file.
- I want to give read, write, execute permissions to the owner, write, execute permissions to the group and no permissions to the others.
all permissions to the owner is 7, write and execute permissions to the group is 3, no permissions to the others is 0.
[root@server1 ~]# chmod 730 file2

[root@server1 ~]# ls -l file2
-rwx-wx---. 1 root root 28 Sep 25 20:41 file2

- I want to give all permissions to all people to the particular file.

root@server1 ~]# chmod 777 file3

[root@server1 ~]# ls -l file3
-rwxrwxrwx. 1 root root 0 Sep 25 21:39 file3


      			r 'read'    w 'write'   x 'execute'

 u 'Owner/User'   
			+ 'adding permissions we gave +'
			- 'removing permissions we gave +'
			= 'assigning permissions, what ever existing is there that will replace with new 			permissions'

 g 'Group'

 o 'Others'

- 
[root@server1 ~]# ls -l file4
-rw-rw-r--. 1 root root 0 Sep 25 21:49 file4

The above command shows, owner having the read, write permissions and group having the read, write permissions and other having the read permission only.

Now we can change the permissions 

[root@server1 ~]# chmod u+x,g-w+x file4 
u+x : adding the execute permissions to the user/owner, 
g-w+x: to the group , removing the write permissions and adding the execute permission.

[root@server1 ~]# ls -l file4
-rwxr-xr--. 1 root root 0 Sep 25 21:49 file4

- [root@server1 ~]# chmod u-rw,g=wx,o+x file5
 u-rw : For user, removingread, write permissions.
 g=wx : For group, overwriting the write, execute permissions.
 o+x  : For other, adding the execute permission.  

[root@server1 ~]# ls -l file5
-----wxr-x. 1 root root 0 Sep 25 22:15 file5

- chmod: This chmod command will change the permissions only for root directories but not sub-directories.
If we want to change the permissions to the sub-directories as well then we need to use below command.

chmond -R 777 d1

- Redirection: We can store the copy of the existing file data into another file.
ls -l > file6 : it will store the data into file6. here > represents redirection.
[root@server1 ~]# ls -l > file6
[root@server1 ~]# cat file6
total 140
-rw-------. 1 root root  1393 Apr 10 04:00 anaconda-ks.cfg
drwxr-xr-x. 2 root root  4096 Jun  8 18:17 Anugna
drwxr-xr-x. 2 root root  4096 Jul 18 03:15 Chinnu
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Desktop
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Documents
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Downloads
-rw-r--r--. 1 root root    61 Sep 25 20:14 file1
-rwx-wx---. 1 root root    28 Sep 25 20:41 file2
-rwxrwxrwx. 1 root root     0 Sep 25 21:39 file3
-rwxr-xr--. 1 root root     0 Sep 25 21:49 file4
-----wxr-x. 1 root root     0 Sep 25 22:15 file5
-rw-r--r--. 1 root root     0 Sep 25 22:51 file6
-rw-r--r--. 1 root root     0 Jul 30 03:40 f.txt
-rw-r--r--. 1 root root 50606 Apr 10 04:00 install.log
-rw-r--r--. 1 root root 10033 Apr 10 03:57 install.log.syslog
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Music
drwxr-xr-x. 2 root root  4096 Jun  8 18:17 Pangal
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Pictures
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Public
drwxr-xr-x. 6 root root  4096 Jul 30 03:47 Sai
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Templates
drwxr-xr-x. 2 root root  4096 Jul 18 01:03 TESR-DTR
drwxr-xr-x. 2 root root  4096 Apr 16 19:20 Test
drwxr-xr-x. 3 root root  4096 Jul 18 05:36 TEST_DIR
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Videos

- Linux will execute multiple commands in a single line by separating ';' colon

[root@server1 ~]# date;cal
Wed Sep 25 22:56:31 IST 2024
   September 2024
Su Mo Tu We Th Fr Sa
 1  2  3  4  5  6  7
 8  9 10 11 12 13 14
15 16 17 18 19 20 21
22 23 24 25 26 27 28
29 30

--------

[root@server1 ~]# date;cal > file7
Wed Sep 25 22:57:06 IST 2024

The above command will store the only latest command data into the file7. If we want to store both commands data into single file then we need to use (), like as below.


[root@server1 ~]# (date;cal) > file7
[root@server1 ~]# cat file7
Wed Sep 25 22:58:19 IST 2024
   September 2024
Su Mo Tu We Th Fr Sa
 1  2  3  4  5  6  7
 8  9 10 11 12 13 14
15 16 17 18 19 20 21
22 23 24 25 26 27 28
29 30



----
- > called as output redirection and 2> called as error output redirection.

[root@server1 ~]# (data;cal)>file8 -- this command will not store the error data into the new file.
-bash: data: command not found
[root@server1 ~]# cat file8
   September 2024
Su Mo Tu We Th Fr Sa
 1  2  3  4  5  6  7
 8  9 10 11 12 13 14
15 16 17 18 19 20 21
22 23 24 25 26 27 28
29 30
---
the below command will store the error data into the file9
[root@server1 ~]# data 2> file9
[root@server1 ~]# cat file9
-bash: data: command not found
-----------

The below command will store the error data into the file10 but correct data not stored but displayed it because we are redirecting the error output only.

[root@server1 ~]# (data;cal) 2> file10
   September 2024
Su Mo Tu We Th Fr Sa
 1  2  3  4  5  6  7
 8  9 10 11 12 13 14
15 16 17 18 19 20 21
22 23 24 25 26 27 28
29 30

------

- if we want to store the error out put along with calendar output into the file then will use below command.


[root@server1 ~]# (data;cal) &> file11
[root@server1 ~]# cat file11
-bash: data: command not found
   September 2024
Su Mo Tu We Th Fr Sa
 1  2  3  4  5  6  7
 8  9 10 11 12 13 14
15 16 17 18 19 20 21
22 23 24 25 26 27 28
29 30

 Redirection:

 >   output redirection
 2>  error output redirection
 &>  both error and correct output redirection.

login as: root
root@192.168.163.134's password:
Last login: Wed Sep 25 18:51:18 2024 from 192.168.163.1
[root@server1 ~]# cat file1
Dockor Kubernetes Swarm
Ansible Jenkins Git
Bamboo Ant Maven
[root@server1 ~]# we file1
-bash: we: command not found
[root@server1 ~]# wc file1
 3  9 61 file1
[root@server1 ~]# ^C
[root@server1 ~]# wc -l file1
3 file1
[root@server1 ~]# ^C
[root@server1 ~]# wc -w file1
9 file1
[root@server1 ~]# ^C
[root@server1 ~]# wc -c file1
61 file1
[root@server1 ~]# ^C
[root@server1 ~]# wc -cw file1
 9 61 file1
[root@server1 ~]# ^C
[root@server1 ~]# cat > file2
2
4
5
8
1
3
6
7
[root@server1 ~]# cat file2
2
4
5
8
1
3
6
7
[root@server1 ~]# sort file2
1
2
3
4
5
6
7
8
[root@server1 ~]# ^C
[root@server1 ~]# cat >> file2
33
44
63
22
[root@server1 ~]# cat file2
2
4
5
8
1
3
6
7
33
44
63
22
[root@server1 ~]# sort file2
1
2
22
3
33
4
44
5
6
63
7
8
[root@server1 ~]# ^C
[root@server1 ~]# ^C
[root@server1 ~]# sort -nv file1
sort: invalid option -- 'v'
Try `sort --help' for more information.
[root@server1 ~]# sort -n file2
1
2
3
4
5
6
7
8
22
33
44
63
[root@server1 ~]# ^C
[root@server1 ~]# ls
anaconda-ks.cfg  Documents  f.txt               Pangal    Templates  Videos
Anugna           Downloads  install.log         Pictures  TESR-DTR
Chinnu           file1      install.log.syslog  Public    Test
Desktop          file2      Music               Sai       TEST_DIR
[root@server1 ~]# ls -l
total 140
-rw-------. 1 root root  1393 Apr 10 04:00 anaconda-ks.cfg
drwxr-xr-x. 2 root root  4096 Jun  8 18:17 Anugna
drwxr-xr-x. 2 root root  4096 Jul 18 03:15 Chinnu
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Desktop
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Documents
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Downloads
-rw-r--r--. 1 root root    61 Sep 25 20:14 file1
-rw-r--r--. 1 root root    28 Sep 25 20:41 file2
-rw-r--r--. 1 root root     0 Jul 30 03:40 f.txt
-rw-r--r--. 1 root root 50606 Apr 10 04:00 install.log
-rw-r--r--. 1 root root 10033 Apr 10 03:57 install.log.syslog
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Music
drwxr-xr-x. 2 root root  4096 Jun  8 18:17 Pangal
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Pictures
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Public
drwxr-xr-x. 6 root root  4096 Jul 30 03:47 Sai
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Templates
drwxr-xr-x. 2 root root  4096 Jul 18 01:03 TESR-DTR
drwxr-xr-x. 2 root root  4096 Apr 16 19:20 Test
drwxr-xr-x. 3 root root  4096 Jul 18 05:36 TEST_DIR
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Videos
[root@server1 ~]# ^C
[root@server1 ~]# ls -l file1
-rw-r--r--. 1 root root 61 Sep 25 20:14 file1
[root@server1 ~]# ls -l file2
-rw-r--r--. 1 root root 28 Sep 25 20:41 file2
[root@server1 ~]# ^C
[root@server1 ~]# chmod 730 file2
[root@server1 ~]# ls -l file2
-rwx-wx---. 1 root root 28 Sep 25 20:41 file2
[root@server1 ~]# ^C
[root@server1 ~]# ^C
[root@server1 ~]# ^C
[root@server1 ~]# ^C
[root@server1 ~]# touch file3
[root@server1 ~]# ls -l file3
-rw-r--r--. 1 root root 0 Sep 25 21:39 file3
[root@server1 ~]# chmod 777 file3
[root@server1 ~]# ls -l file3
-rwxrwxrwx. 1 root root 0 Sep 25 21:39 file3
[root@server1 ~]# ^C
[root@server1 ~]# ls -l file3
-rwxrwxrwx. 1 root root 0 Sep 25 21:39 file3
[root@server1 ~]# tocuh file4
-bash: tocuh: command not found
[root@server1 ~]# touch file4
[root@server1 ~]# ls -l file4
-rw-r--r--. 1 root root 0 Sep 25 21:49 file4
[root@server1 ~]# chmod 66 file4
[root@server1 ~]# ls -l file4
----rw-rw-. 1 root root 0 Sep 25 21:49 file4
[root@server1 ~]# chmod 662 file4
[root@server1 ~]# ls -l file4
-rw-rw--w-. 1 root root 0 Sep 25 21:49 file4
[root@server1 ~]# chmod 664 file4
[root@server1 ~]# ls -l file4
-rw-rw-r--. 1 root root 0 Sep 25 21:49 file4
[root@server1 ~]# chmod u+^C
[root@server1 ~]# chmod u+x g-w+x file4
chmod: cannot access `g-w+x': No such file or directory
[root@server1 ~]# chmod u+x,g-w+x file4
[root@server1 ~]# ls -l file4
-rwxr-xr--. 1 root root 0 Sep 25 21:49 file4
[root@server1 ~]# ^C
[root@server1 ~]# touch file5
[root@server1 ~]# ls -l file5
-rw-r--r--. 1 root root 0 Sep 25 22:15 file5
[root@server1 ~]# chmod u-rw, g=wx, o+x
chmod: invalid mode: `u-rw,'
Try `chmod --help' for more information.
[root@server1 ~]# chmod u-rw, g=wx, o+x file4
chmod: invalid mode: `u-rw,'
Try `chmod --help' for more information.
[root@server1 ~]# chmod u-rw, g=wx,o+x file4
chmod: invalid mode: `u-rw,'
Try `chmod --help' for more information.
[root@server1 ~]# chmod u-rw, g=wx,o+x file5
chmod: invalid mode: `u-rw,'
Try `chmod --help' for more information.
[root@server1 ~]# ls -l file5
-rw-r--r--. 1 root root 0 Sep 25 22:15 file5
[root@server1 ~]# chmod u-rw,g=wx,o+x file5
[root@server1 ~]# ls -l file5
-----wxr-x. 1 root root 0 Sep 25 22:15 file5
[root@server1 ~]# ^C
[root@server1 ~]# ^C
[root@server1 ~]# ls -l d1
ls: cannot access d1: No such file or directory
[root@server1 ~]# cd d1
-bash: cd: d1: No such file or directory
[root@server1 ~]#
[root@server1 ~]#
[root@server1 ~]# ls -l
total 140
-rw-------. 1 root root  1393 Apr 10 04:00 anaconda-ks.cfg
drwxr-xr-x. 2 root root  4096 Jun  8 18:17 Anugna
drwxr-xr-x. 2 root root  4096 Jul 18 03:15 Chinnu
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Desktop
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Documents
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Downloads
-rw-r--r--. 1 root root    61 Sep 25 20:14 file1
-rwx-wx---. 1 root root    28 Sep 25 20:41 file2
-rwxrwxrwx. 1 root root     0 Sep 25 21:39 file3
-rwxr-xr--. 1 root root     0 Sep 25 21:49 file4
-----wxr-x. 1 root root     0 Sep 25 22:15 file5
-rw-r--r--. 1 root root     0 Jul 30 03:40 f.txt
-rw-r--r--. 1 root root 50606 Apr 10 04:00 install.log
-rw-r--r--. 1 root root 10033 Apr 10 03:57 install.log.syslog
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Music
drwxr-xr-x. 2 root root  4096 Jun  8 18:17 Pangal
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Pictures
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Public
drwxr-xr-x. 6 root root  4096 Jul 30 03:47 Sai
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Templates
drwxr-xr-x. 2 root root  4096 Jul 18 01:03 TESR-DTR
drwxr-xr-x. 2 root root  4096 Apr 16 19:20 Test
drwxr-xr-x. 3 root root  4096 Jul 18 05:36 TEST_DIR
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Videos
[root@server1 ~]# ls -la
total 244
dr-xr-x---. 31 root root  4096 Sep 25 22:15 .
dr-xr-xr-x. 25 root root  4096 Sep 25 18:39 ..
drwxr-xr-x.  2 root root  4096 Apr 10 05:18 .abrt
-rw-------.  1 root root  1393 Apr 10 04:00 anaconda-ks.cfg
drwxr-xr-x.  2 root root  4096 Jun  8 18:17 Anugna
-rw-------.  1 root root  3123 Sep 25 20:32 .bash_history
-rw-r--r--.  1 root root    18 May 20  2009 .bash_logout
-rw-r--r--.  1 root root   176 May 20  2009 .bash_profile
-rw-r--r--.  1 root root   176 Sep 23  2004 .bashrc
drwxr-xr-x.  3 root root  4096 Jun  8 17:20 .cache
drwxr-xr-x.  2 root root  4096 Jul 18 03:15 Chinnu
drwx------.  5 root root  4096 Apr 10 05:18 .config
-rw-r--r--.  1 root root   100 Sep 23  2004 .cshrc
drwx------.  3 root root  4096 Apr 10 05:18 .dbus
drwxr-xr-x.  2 root root  4096 Apr 10 05:18 Desktop
drwxr-xr-x.  2 root root  4096 Apr 10 05:18 Documents
drwxr-xr-x.  2 root root  4096 Apr 10 05:18 Downloads
-rw-------.  1 root root    16 Apr 10 05:18 .esd_auth
-rw-r--r--.  1 root root    61 Sep 25 20:14 file1
-rwx-wx---.  1 root root    28 Sep 25 20:41 file2
-rwxrwxrwx.  1 root root     0 Sep 25 21:39 file3
-rwxr-xr--.  1 root root     0 Sep 25 21:49 file4
-----wxr-x.  1 root root     0 Sep 25 22:15 file5
-rw-r--r--.  1 root root     0 Jul 30 03:40 f.txt
drwx------.  4 root root  4096 Sep 25 18:39 .gconf
drwx------.  2 root root  4096 Sep 25 19:00 .gconfd
drwx------.  5 root root  4096 Apr 10 05:18 .gnome2
drwxr-xr-x.  3 root root  4096 Apr 10 05:18 .gnote
drwx------.  2 root root  4096 Sep 25 18:39 .gnupg
-rw-r--r--.  1 root root   107 Sep 25 18:39 .gtk-bookmarks
dr-x------.  2 root root     0 Sep 25 18:39 .gvfs
-rw-------.  1 root root  4030 Sep 25 18:39 .ICEauthority
-rw-r--r--.  1 root root   623 Sep 25 18:39 .imsettings.log
-rw-r--r--.  1 root root 50606 Apr 10 04:00 install.log
-rw-r--r--.  1 root root 10033 Apr 10 03:57 install.log.syslog
drwxr-xr-x.  3 root root  4096 Apr 10 05:18 .local
drwxr-xr-x.  2 root root  4096 Apr 10 05:18 Music
drwxr-xr-x.  2 root root  4096 Apr 10 05:18 .nautilus
drwxr-xr-x.  2 root root  4096 Jun  8 18:17 Pangal
drwxr-xr-x.  2 root root  4096 Apr 10 05:18 Pictures
drwxr-xr-x.  2 root root  4096 Apr 10 05:18 Public
drwx------.  2 root root  4096 Apr 10 05:18 .pulse
-rw-------.  1 root root   256 Apr 10 05:18 .pulse-cookie
drwxr-xr-x.  6 root root  4096 Jul 30 03:47 Sai
drwx------.  2 root root  4096 Jul 30 21:06 .ssh
-rw-r--r--.  1 root root   129 Dec  4  2004 .tcshrc
drwxr-xr-x.  2 root root  4096 Apr 10 05:18 Templates
drwxr-xr-x.  2 root root  4096 Jul 18 01:03 TESR-DTR
drwxr-xr-x.  2 root root  4096 Apr 16 19:20 Test
drwxr-xr-x.  3 root root  4096 Jul 18 05:36 TEST_DIR
drwxr-xr-x.  2 root root  4096 Apr 10 05:18 Videos
[root@server1 ~]# cal
   September 2024
Su Mo Tu We Th Fr Sa
 1  2  3  4  5  6  7
 8  9 10 11 12 13 14
15 16 17 18 19 20 21
22 23 24 25 26 27 28
29 30

[root@server1 ~]# date
Wed Sep 25 22:41:19 IST 2024
[root@server1 ~]# date - 1
date: extra operand `1'
Try `date --help' for more information.
[root@server1 ~]# ls -l file5
-----wxr-x. 1 root root 0 Sep 25 22:15 file5
[root@server1 ~]# ls -l
total 140
-rw-------. 1 root root  1393 Apr 10 04:00 anaconda-ks.cfg
drwxr-xr-x. 2 root root  4096 Jun  8 18:17 Anugna
drwxr-xr-x. 2 root root  4096 Jul 18 03:15 Chinnu
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Desktop
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Documents
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Downloads
-rw-r--r--. 1 root root    61 Sep 25 20:14 file1
-rwx-wx---. 1 root root    28 Sep 25 20:41 file2
-rwxrwxrwx. 1 root root     0 Sep 25 21:39 file3
-rwxr-xr--. 1 root root     0 Sep 25 21:49 file4
-----wxr-x. 1 root root     0 Sep 25 22:15 file5
-rw-r--r--. 1 root root     0 Jul 30 03:40 f.txt
-rw-r--r--. 1 root root 50606 Apr 10 04:00 install.log
-rw-r--r--. 1 root root 10033 Apr 10 03:57 install.log.syslog
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Music
drwxr-xr-x. 2 root root  4096 Jun  8 18:17 Pangal
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Pictures
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Public
drwxr-xr-x. 6 root root  4096 Jul 30 03:47 Sai
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Templates
drwxr-xr-x. 2 root root  4096 Jul 18 01:03 TESR-DTR
drwxr-xr-x. 2 root root  4096 Apr 16 19:20 Test
drwxr-xr-x. 3 root root  4096 Jul 18 05:36 TEST_DIR
drwxr-xr-x. 2 root root  4096 Apr 10 05:18 Videos
[root@server1 ~]#




----------------
26th Sp'2024 --Running class

saiinfo123@cloudshell:~$ ls /etc/pas*
/etc/passwd  /etc/passwd-
saiinfo123@cloudshell:~$ ls /etc/mach*
/etc/machine-id

We can search file name or folder name with help of * as mentioned above


29/09/2024
=========

 FHS ( File Hierarchy System ): Basically It's organize / Categories some types of files.

- Configuration files stores in '/etc/ directory or a sub-directory'.
- All device files stores into '/DEV' folder

** Different Files in Linux System.
1. Regular Files
2. Directories
3. Character Special Devices
4. Block Special Device.
5. Symbolic Link

1. Regular files are where we are creating files. It might contains the human readable data or may not like it may contains Binary Data.
2. Directories it's like Folders.
3 & 4: basically it  device files . Block Special Devices like mostly storage based files like RAM's, Hard Disk

30/0/2024
=========
- Created AWS account and launched EC2 instance and connected Linux

04/10/2024
==========
User Authentication Files
/etc/passwd
/etc/group/
/etc/shadow
/etc/gshadow

ls /etc/ .... you can see the files
stat /etc/passwd

-- 1st field is user name, 
-- 2nd field is password
-- 3rd field ... uid ... its unique user id for each user.
-- 4th field ... GroupId ... each group have the unique id for each group.
-- 5th field ... max blank ..
-- 6th field ... Home directory
-- 7th field ... 


3 types of user accounts.

super user account .. uid==0
service user account .. uid <1000
normal user .. uid >1000